
Keyboard_input.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000004ec  00000580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080006a  0080006a  0000058a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000854  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f1  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000534  00000000  00000000  000013a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000018d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000368  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000274  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ec ee       	ldi	r30, 0xEC	; 236
  36:	f4 e0       	ldi	r31, 0x04	; 4
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	aa 36       	cpi	r26, 0x6A	; 106
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	aa e6       	ldi	r26, 0x6A	; 106
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a6 38       	cpi	r26, 0x86	; 134
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	31 d2       	rcall	.+1122   	; 0x4b8 <main>
  56:	48 c2       	rjmp	.+1168   	; 0x4e8 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <getkey>:
}


void getkey()
{
	DDRD = readc1; //first column
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xF0;	//set as low to read
  5e:	20 ef       	ldi	r18, 0xF0	; 240
  60:	22 bb       	out	0x12, r18	; 18
	insc[0] = PIND;
  62:	80 b3       	in	r24, 0x10	; 16
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f0 e0       	ldi	r31, 0x00	; 0
	insc[0]=insc[0]>>4;
  6a:	95 95       	asr	r25
  6c:	87 95       	ror	r24
  6e:	95 95       	asr	r25
  70:	87 95       	ror	r24
  72:	95 95       	asr	r25
  74:	87 95       	ror	r24
  76:	95 95       	asr	r25
  78:	87 95       	ror	r24
  7a:	91 83       	std	Z+1, r25	; 0x01
  7c:	80 83       	st	Z, r24
	PORTD = 0x00; //reset output
  7e:	12 ba       	out	0x12, r1	; 18
	DDRD = 0x00; //reset input
  80:	11 ba       	out	0x11, r1	; 17
	DDRD = readc2; //Second column
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xF0;	//set as low to read
  86:	22 bb       	out	0x12, r18	; 18
	insc[1] = PIND;
  88:	80 b3       	in	r24, 0x10	; 16
  8a:	90 e0       	ldi	r25, 0x00	; 0
	insc[1]=insc[1]>>4;
  8c:	95 95       	asr	r25
  8e:	87 95       	ror	r24
  90:	95 95       	asr	r25
  92:	87 95       	ror	r24
  94:	95 95       	asr	r25
  96:	87 95       	ror	r24
  98:	95 95       	asr	r25
  9a:	87 95       	ror	r24
  9c:	93 83       	std	Z+3, r25	; 0x03
  9e:	82 83       	std	Z+2, r24	; 0x02
	PORTD = 0x00; //reset output
  a0:	12 ba       	out	0x12, r1	; 18
	DDRD = 0x00; //reset input	
  a2:	11 ba       	out	0x11, r1	; 17
	DDRD = readc3; //third column
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xF0;	//set as low to read
  a8:	22 bb       	out	0x12, r18	; 18
	insc[2] = PIND;		
  aa:	80 b3       	in	r24, 0x10	; 16
  ac:	90 e0       	ldi	r25, 0x00	; 0
	insc[2]=insc[2]>>4; //For testing purposes they are kept here
  ae:	95 95       	asr	r25
  b0:	87 95       	ror	r24
  b2:	95 95       	asr	r25
  b4:	87 95       	ror	r24
  b6:	95 95       	asr	r25
  b8:	87 95       	ror	r24
  ba:	95 95       	asr	r25
  bc:	87 95       	ror	r24
  be:	95 83       	std	Z+5, r25	; 0x05
  c0:	84 83       	std	Z+4, r24	; 0x04
	PORTD = 0x00; //reset output
  c2:	12 ba       	out	0x12, r1	; 18
	DDRD = 0x00; //reset input
  c4:	11 ba       	out	0x11, r1	; 17
	DDRD = readc4; //first column
  c6:	88 e0       	ldi	r24, 0x08	; 8
  c8:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xF0;	//set as low to read
  ca:	22 bb       	out	0x12, r18	; 18
	insc[3] = PIND;
  cc:	80 b3       	in	r24, 0x10	; 16
  ce:	90 e0       	ldi	r25, 0x00	; 0
	insc[3]=insc[3]>>4;
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
  d4:	95 95       	asr	r25
  d6:	87 95       	ror	r24
  d8:	95 95       	asr	r25
  da:	87 95       	ror	r24
  dc:	95 95       	asr	r25
  de:	87 95       	ror	r24
  e0:	97 83       	std	Z+7, r25	; 0x07
  e2:	86 83       	std	Z+6, r24	; 0x06
	PORTD = 0x00; //reset output
  e4:	12 ba       	out	0x12, r1	; 18
	DDRD = 0x00; //reset input
  e6:	11 ba       	out	0x11, r1	; 17
  e8:	08 95       	ret

000000ea <outputkeyc1>:
	}
	return;
}	
void outputkeyc1()
{
	switch(insc[0])
  ea:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <insc>
  ee:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <insc+0x1>
  f2:	8b 30       	cpi	r24, 0x0B	; 11
  f4:	91 05       	cpc	r25, r1
  f6:	81 f1       	breq	.+96     	; 0x158 <outputkeyc1+0x6e>
  f8:	24 f4       	brge	.+8      	; 0x102 <outputkeyc1+0x18>
  fa:	07 97       	sbiw	r24, 0x07	; 7
  fc:	09 f4       	brne	.+2      	; 0x100 <outputkeyc1+0x16>
  fe:	3f c0       	rjmp	.+126    	; 0x17e <outputkeyc1+0x94>
 100:	41 c0       	rjmp	.+130    	; 0x184 <outputkeyc1+0x9a>
 102:	8d 30       	cpi	r24, 0x0D	; 13
 104:	91 05       	cpc	r25, r1
 106:	a9 f0       	breq	.+42     	; 0x132 <outputkeyc1+0x48>
 108:	0e 97       	sbiw	r24, 0x0e	; 14
 10a:	e1 f5       	brne	.+120    	; 0x184 <outputkeyc1+0x9a>
	{
		case 14:		samplecode[y]=1;	y++;	 break;
 10c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y>
 110:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y+0x1>
 114:	fc 01       	movw	r30, r24
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	e4 58       	subi	r30, 0x84	; 132
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	31 83       	std	Z+1, r19	; 0x01
 124:	20 83       	st	Z, r18
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y+0x1>
 12c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y>
 130:	08 95       	ret
		case 13:		samplecode[y]=4;	y++; 	 break;
 132:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y>
 136:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y+0x1>
 13a:	fc 01       	movw	r30, r24
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	e4 58       	subi	r30, 0x84	; 132
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	24 e0       	ldi	r18, 0x04	; 4
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	31 83       	std	Z+1, r19	; 0x01
 14a:	20 83       	st	Z, r18
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y+0x1>
 152:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y>
 156:	08 95       	ret
		case 11:		samplecode[y]=7;	y++; 	 break;
 158:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y>
 15c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y+0x1>
 160:	fc 01       	movw	r30, r24
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	e4 58       	subi	r30, 0x84	; 132
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	27 e0       	ldi	r18, 0x07	; 7
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	31 83       	std	Z+1, r19	; 0x01
 170:	20 83       	st	Z, r18
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y+0x1>
 178:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y>
 17c:	08 95       	ret
		case 7:			PORTA = 0x04;		 break; //not number
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	8b bb       	out	0x1b, r24	; 27
 182:	08 95       	ret
		default:		PORTA = 0x04;		 break;
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	8b bb       	out	0x1b, r24	; 27
 188:	08 95       	ret

0000018a <outputkeyc2>:
	return;
}

void outputkeyc2()
{
	switch(insc[1])
 18a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <insc+0x2>
 18e:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <insc+0x3>
 192:	8b 30       	cpi	r24, 0x0B	; 11
 194:	91 05       	cpc	r25, r1
 196:	89 f1       	breq	.+98     	; 0x1fa <outputkeyc2+0x70>
 198:	24 f4       	brge	.+8      	; 0x1a2 <outputkeyc2+0x18>
 19a:	07 97       	sbiw	r24, 0x07	; 7
 19c:	09 f4       	brne	.+2      	; 0x1a0 <outputkeyc2+0x16>
 19e:	40 c0       	rjmp	.+128    	; 0x220 <__DATA_REGION_LENGTH__+0x20>
 1a0:	50 c0       	rjmp	.+160    	; 0x242 <__DATA_REGION_LENGTH__+0x42>
 1a2:	8d 30       	cpi	r24, 0x0D	; 13
 1a4:	91 05       	cpc	r25, r1
 1a6:	b1 f0       	breq	.+44     	; 0x1d4 <outputkeyc2+0x4a>
 1a8:	0e 97       	sbiw	r24, 0x0e	; 14
 1aa:	09 f0       	breq	.+2      	; 0x1ae <outputkeyc2+0x24>
 1ac:	4a c0       	rjmp	.+148    	; 0x242 <__DATA_REGION_LENGTH__+0x42>
	{
		case 14:		samplecode[y]=2;	y++;	 break;
 1ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y>
 1b2:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y+0x1>
 1b6:	fc 01       	movw	r30, r24
 1b8:	ee 0f       	add	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	e4 58       	subi	r30, 0x84	; 132
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	22 e0       	ldi	r18, 0x02	; 2
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	31 83       	std	Z+1, r19	; 0x01
 1c6:	20 83       	st	Z, r18
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y+0x1>
 1ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y>
 1d2:	08 95       	ret
		case 13:		samplecode[y]=5;	y++;	 break;
 1d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y>
 1d8:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y+0x1>
 1dc:	fc 01       	movw	r30, r24
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	e4 58       	subi	r30, 0x84	; 132
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	25 e0       	ldi	r18, 0x05	; 5
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	31 83       	std	Z+1, r19	; 0x01
 1ec:	20 83       	st	Z, r18
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y+0x1>
 1f4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y>
 1f8:	08 95       	ret
		case 11:		samplecode[y]=8;	y++;	 break;
 1fa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y>
 1fe:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y+0x1>
 202:	fc 01       	movw	r30, r24
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	e4 58       	subi	r30, 0x84	; 132
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	28 e0       	ldi	r18, 0x08	; 8
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	31 83       	std	Z+1, r19	; 0x01
 212:	20 83       	st	Z, r18
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y+0x1>
 21a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y>
 21e:	08 95       	ret
		case 7:			samplecode[y]=0;	y++;	 break; 
 220:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y>
 224:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y+0x1>
 228:	fc 01       	movw	r30, r24
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	e4 58       	subi	r30, 0x84	; 132
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	11 82       	std	Z+1, r1	; 0x01
 234:	10 82       	st	Z, r1
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y+0x1>
 23c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y>
 240:	08 95       	ret
		default:	PORTA = 0x04;		 break;
 242:	84 e0       	ldi	r24, 0x04	; 4
 244:	8b bb       	out	0x1b, r24	; 27
 246:	08 95       	ret

00000248 <outputkeyc3>:
	return;
}

void outputkeyc3()
{
	switch(insc[2])
 248:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <insc+0x4>
 24c:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <insc+0x5>
 250:	8b 30       	cpi	r24, 0x0B	; 11
 252:	91 05       	cpc	r25, r1
 254:	81 f1       	breq	.+96     	; 0x2b6 <__stack+0x57>
 256:	24 f4       	brge	.+8      	; 0x260 <__stack+0x1>
 258:	07 97       	sbiw	r24, 0x07	; 7
 25a:	09 f4       	brne	.+2      	; 0x25e <outputkeyc3+0x16>
 25c:	3f c0       	rjmp	.+126    	; 0x2dc <__stack+0x7d>
 25e:	41 c0       	rjmp	.+130    	; 0x2e2 <__stack+0x83>
 260:	8d 30       	cpi	r24, 0x0D	; 13
 262:	91 05       	cpc	r25, r1
 264:	a9 f0       	breq	.+42     	; 0x290 <__stack+0x31>
 266:	0e 97       	sbiw	r24, 0x0e	; 14
 268:	e1 f5       	brne	.+120    	; 0x2e2 <__stack+0x83>
	{
		case 14:		samplecode[y]=3;	y++; 	 break;
 26a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y>
 26e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y+0x1>
 272:	fc 01       	movw	r30, r24
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	e4 58       	subi	r30, 0x84	; 132
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	23 e0       	ldi	r18, 0x03	; 3
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	31 83       	std	Z+1, r19	; 0x01
 282:	20 83       	st	Z, r18
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y+0x1>
 28a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y>
 28e:	08 95       	ret
		case 13:		samplecode[y]=6;	y++;	 break;
 290:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y>
 294:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y+0x1>
 298:	fc 01       	movw	r30, r24
 29a:	ee 0f       	add	r30, r30
 29c:	ff 1f       	adc	r31, r31
 29e:	e4 58       	subi	r30, 0x84	; 132
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	26 e0       	ldi	r18, 0x06	; 6
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	31 83       	std	Z+1, r19	; 0x01
 2a8:	20 83       	st	Z, r18
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y+0x1>
 2b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y>
 2b4:	08 95       	ret
		case 11:		samplecode[y]=9;	y++;	 break;
 2b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y>
 2ba:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y+0x1>
 2be:	fc 01       	movw	r30, r24
 2c0:	ee 0f       	add	r30, r30
 2c2:	ff 1f       	adc	r31, r31
 2c4:	e4 58       	subi	r30, 0x84	; 132
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	29 e0       	ldi	r18, 0x09	; 9
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	31 83       	std	Z+1, r19	; 0x01
 2ce:	20 83       	st	Z, r18
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y+0x1>
 2d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y>
 2da:	08 95       	ret
		case 7:			PORTA = 0x04;		 break;
 2dc:	84 e0       	ldi	r24, 0x04	; 4
 2de:	8b bb       	out	0x1b, r24	; 27
 2e0:	08 95       	ret
		default:		PORTA = 0x04;		 break;
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	8b bb       	out	0x1b, r24	; 27
 2e6:	08 95       	ret

000002e8 <deletecode>:
}

void deletecode()
{

	samplecode[0]=0;
 2e8:	ec e7       	ldi	r30, 0x7C	; 124
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	11 82       	std	Z+1, r1	; 0x01
 2ee:	10 82       	st	Z, r1
	samplecode[1]=0;
 2f0:	13 82       	std	Z+3, r1	; 0x03
 2f2:	12 82       	std	Z+2, r1	; 0x02
	samplecode[2]=0; 
 2f4:	15 82       	std	Z+5, r1	; 0x05
 2f6:	14 82       	std	Z+4, r1	; 0x04
	samplecode[3]=0;
 2f8:	17 82       	std	Z+7, r1	; 0x07
 2fa:	16 82       	std	Z+6, r1	; 0x06
	y=0;
 2fc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <y+0x1>
 300:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <y>
	x=0;
 304:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <x+0x1>
 308:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <x>
	insc[0]=0x0F;
 30c:	e0 e7       	ldi	r30, 0x70	; 112
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	8f e0       	ldi	r24, 0x0F	; 15
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	91 83       	std	Z+1, r25	; 0x01
 316:	80 83       	st	Z, r24
	insc[1]=0x0F;
 318:	93 83       	std	Z+3, r25	; 0x03
 31a:	82 83       	std	Z+2, r24	; 0x02
	insc[2]=0x0F;
 31c:	95 83       	std	Z+5, r25	; 0x05
 31e:	84 83       	std	Z+4, r24	; 0x04
 320:	08 95       	ret

00000322 <checkcode>:
	return;
}
void checkcode()
{
	int error=0;
	if(samplecode[0]!=code[0])
 322:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <samplecode>
 326:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <samplecode+0x1>
 32a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 32e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 332:	28 17       	cp	r18, r24
 334:	39 07       	cpc	r19, r25
 336:	19 f4       	brne	.+6      	; 0x33e <checkcode+0x1c>
	insc[2]=0x0F;
	return;
}
void checkcode()
{
	int error=0;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <checkcode+0x20>
	if(samplecode[0]!=code[0])
	error++;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
	if(samplecode[1]!=code[1])
 342:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <samplecode+0x2>
 346:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <samplecode+0x3>
 34a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 34e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 352:	42 17       	cp	r20, r18
 354:	53 07       	cpc	r21, r19
 356:	09 f0       	breq	.+2      	; 0x35a <checkcode+0x38>
	error++;
 358:	01 96       	adiw	r24, 0x01	; 1
	if(samplecode[2]!=code[2])
 35a:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <samplecode+0x4>
 35e:	50 91 81 00 	lds	r21, 0x0081	; 0x800081 <samplecode+0x5>
 362:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 366:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 36a:	42 17       	cp	r20, r18
 36c:	53 07       	cpc	r21, r19
 36e:	09 f0       	breq	.+2      	; 0x372 <checkcode+0x50>
	error++;
 370:	01 96       	adiw	r24, 0x01	; 1
	if(samplecode[3]!=code[3])
 372:	40 91 82 00 	lds	r20, 0x0082	; 0x800082 <samplecode+0x6>
 376:	50 91 83 00 	lds	r21, 0x0083	; 0x800083 <samplecode+0x7>
 37a:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 37e:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 382:	42 17       	cp	r20, r18
 384:	53 07       	cpc	r21, r19
 386:	09 f0       	breq	.+2      	; 0x38a <checkcode+0x68>
	error++;		
 388:	01 96       	adiw	r24, 0x01	; 1
		
	if(error==0)
 38a:	89 2b       	or	r24, r25
 38c:	a9 f4       	brne	.+42     	; 0x3b8 <checkcode+0x96>
	{
		PORTA = 0x08;
 38e:	88 e0       	ldi	r24, 0x08	; 8
 390:	8b bb       	out	0x1b, r24	; 27
		PORTE = 0xFF;
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	87 b9       	out	0x07, r24	; 7
		deletecode();
 396:	a8 df       	rcall	.-176    	; 0x2e8 <deletecode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 398:	2f e3       	ldi	r18, 0x3F	; 63
 39a:	82 e4       	ldi	r24, 0x42	; 66
 39c:	9f e0       	ldi	r25, 0x0F	; 15
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <checkcode+0x7c>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <checkcode+0x86>
 3a8:	00 00       	nop
		_delay_ms(5000.0);
		PORTA = 0x00;
 3aa:	1b ba       	out	0x1b, r1	; 27
		PORTE =0x00;
 3ac:	17 b8       	out	0x07, r1	; 7
		y=0;
 3ae:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <y+0x1>
 3b2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <y>
		return;
 3b6:	08 95       	ret
	}
	else	
	{ 
	deletecode();
 3b8:	97 df       	rcall	.-210    	; 0x2e8 <deletecode>
	PORTA = 0x08;
 3ba:	88 e0       	ldi	r24, 0x08	; 8
 3bc:	8b bb       	out	0x1b, r24	; 27
 3be:	8f e4       	ldi	r24, 0x4F	; 79
 3c0:	93 ec       	ldi	r25, 0xC3	; 195
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <checkcode+0xa0>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <checkcode+0xa6>
 3c8:	00 00       	nop
	_delay_ms(200.0);
	PORTA = 0x04;
 3ca:	84 e0       	ldi	r24, 0x04	; 4
 3cc:	8b bb       	out	0x1b, r24	; 27
 3ce:	8f e4       	ldi	r24, 0x4F	; 79
 3d0:	93 ec       	ldi	r25, 0xC3	; 195
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <checkcode+0xb0>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <checkcode+0xb6>
 3d8:	00 00       	nop
	_delay_ms(200.0);
	PORTA = 0x02;
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	8b bb       	out	0x1b, r24	; 27
 3de:	8f e4       	ldi	r24, 0x4F	; 79
 3e0:	93 ec       	ldi	r25, 0xC3	; 195
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <checkcode+0xc0>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <checkcode+0xc6>
 3e8:	00 00       	nop
	_delay_ms(200.0);
	PORTA = 0x01;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	8b bb       	out	0x1b, r24	; 27
 3ee:	8f e4       	ldi	r24, 0x4F	; 79
 3f0:	93 ec       	ldi	r25, 0xC3	; 195
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <checkcode+0xd0>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <checkcode+0xd6>
 3f8:	00 00       	nop
	_delay_ms(200.0);
	y=0;	
 3fa:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <y+0x1>
 3fe:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <y>
 402:	08 95       	ret

00000404 <outputkey>:
	}
	return;
}
void outputkey()
{	
	PORTA = 0x02;
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	8b bb       	out	0x1b, r24	; 27
	switch(x)
 408:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <x>
 40c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <x+0x1>
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	91 05       	cpc	r25, r1
 414:	81 f0       	breq	.+32     	; 0x436 <outputkey+0x32>
 416:	82 30       	cpi	r24, 0x02	; 2
 418:	91 05       	cpc	r25, r1
 41a:	c1 f0       	breq	.+48     	; 0x44c <outputkey+0x48>
 41c:	89 2b       	or	r24, r25
 41e:	01 f5       	brne	.+64     	; 0x460 <outputkey+0x5c>
	{
		case 0:outputkeyc1();		_delay_ms(1000.0);	 break;
 420:	64 de       	rcall	.-824    	; 0xea <outputkeyc1>
 422:	2f e3       	ldi	r18, 0x3F	; 63
 424:	8d e0       	ldi	r24, 0x0D	; 13
 426:	93 e0       	ldi	r25, 0x03	; 3
 428:	21 50       	subi	r18, 0x01	; 1
 42a:	80 40       	sbci	r24, 0x00	; 0
 42c:	90 40       	sbci	r25, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <outputkey+0x24>
 430:	00 c0       	rjmp	.+0      	; 0x432 <outputkey+0x2e>
 432:	00 00       	nop
 434:	15 c0       	rjmp	.+42     	; 0x460 <outputkey+0x5c>
		case 1:outputkeyc2();		_delay_ms(1000.0);	 break;
 436:	a9 de       	rcall	.-686    	; 0x18a <outputkeyc2>
 438:	2f e3       	ldi	r18, 0x3F	; 63
 43a:	8d e0       	ldi	r24, 0x0D	; 13
 43c:	93 e0       	ldi	r25, 0x03	; 3
 43e:	21 50       	subi	r18, 0x01	; 1
 440:	80 40       	sbci	r24, 0x00	; 0
 442:	90 40       	sbci	r25, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <outputkey+0x3a>
 446:	00 c0       	rjmp	.+0      	; 0x448 <outputkey+0x44>
 448:	00 00       	nop
 44a:	0a c0       	rjmp	.+20     	; 0x460 <outputkey+0x5c>
		case 2:outputkeyc3();		_delay_ms(1000.0);	 break;
 44c:	fd de       	rcall	.-518    	; 0x248 <outputkeyc3>
 44e:	2f e3       	ldi	r18, 0x3F	; 63
 450:	8d e0       	ldi	r24, 0x0D	; 13
 452:	93 e0       	ldi	r25, 0x03	; 3
 454:	21 50       	subi	r18, 0x01	; 1
 456:	80 40       	sbci	r24, 0x00	; 0
 458:	90 40       	sbci	r25, 0x00	; 0
 45a:	e1 f7       	brne	.-8      	; 0x454 <outputkey+0x50>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <outputkey+0x5a>
 45e:	00 00       	nop
		
	}
	if(y>3)
 460:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y>
 464:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y+0x1>
 468:	04 97       	sbiw	r24, 0x04	; 4
 46a:	0c f0       	brlt	.+2      	; 0x46e <outputkey+0x6a>
	{
	checkcode();
 46c:	5a df       	rcall	.-332    	; 0x322 <checkcode>
 46e:	08 95       	ret

00000470 <checkkey>:

void checkkey()
{
		
		
	for(x=0;x<3;x++)
 470:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <x+0x1>
 474:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <x>
 478:	17 c0       	rjmp	.+46     	; 0x4a8 <checkkey+0x38>
	{
	
		if(insc[x]==0x0F)
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	fc 01       	movw	r30, r24
 480:	e0 59       	subi	r30, 0x90	; 144
 482:	ff 4f       	sbci	r31, 0xFF	; 255
 484:	80 81       	ld	r24, Z
 486:	91 81       	ldd	r25, Z+1	; 0x01
 488:	0f 97       	sbiw	r24, 0x0f	; 15
 48a:	61 f4       	brne	.+24     	; 0x4a4 <checkkey+0x34>
		{	
			
			PORTA = 0x01;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	8b bb       	out	0x1b, r24	; 27

void checkkey()
{
		
		
	for(x=0;x<3;x++)
 490:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <x>
 494:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <x+0x1>
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <x+0x1>
 49e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <x>
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <checkkey+0x38>
			PORTA = 0x01;
			
		}
		else
		{
			outputkey();
 4a4:	af df       	rcall	.-162    	; 0x404 <outputkey>
			return;	
 4a6:	08 95       	ret

void checkkey()
{
		
		
	for(x=0;x<3;x++)
 4a8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <x>
 4ac:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <x+0x1>
 4b0:	83 30       	cpi	r24, 0x03	; 3
 4b2:	91 05       	cpc	r25, r1
 4b4:	14 f3       	brlt	.-60     	; 0x47a <checkkey+0xa>
 4b6:	08 95       	ret

000004b8 <main>:
	int y;	//used for the array of the sample code
	int led;
int main(void)
{
	//DDRD = 0x00;	//Keypad input
	DDRC = 0xFF;	//output to see number
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xFF;
 4bc:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0xFF;
 4be:	86 b9       	out	0x06, r24	; 6
	PORTE=0x00;
 4c0:	17 b8       	out	0x07, r1	; 7
	x=0;
 4c2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <x+0x1>
 4c6:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <x>
	y=0; //initialized
 4ca:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <y+0x1>
 4ce:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <y>
	previouskeypress = 0;
 4d2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <previouskeypress+0x1>
 4d6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <previouskeypress>
	keypressvar = 0;	
 4da:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x1>
 4de:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
    while (1) 
    {	
		getkey();
 4e2:	bb dd       	rcall	.-1162   	; 0x5a <getkey>
		checkkey();	
 4e4:	c5 df       	rcall	.-118    	; 0x470 <checkkey>
 4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <main+0x2a>

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
